@startuml Managed Subscribe Sample
title Managed Subscribe Sequence
participant DTProvider
participant Ibeji
participant ManagedSubscribeModule
participant DTConsumer
participant Agemo
participant Broker

== Creation Process ==

Ibeji <- DTProvider: 1. Register (EntityAccessInfo[]) : Includes ManagedSubscribe endpointInfo
note right of DTProvider
// Entry that indicates to Ibeji that the Provider wants to utilize the Managed Subscribe Module.
{
    protocol: "grpc"
    operations: ["ManagedSubscribe"]
    uri: "Provider callback uri"
    context: ""
}
end note
Ibeji <- ManagedSubscribeModule: 1a. Intercepts Register request
ManagedSubscribeModule <- ManagedSubscribeModule: 1b. Modify ManagedSubscribe endpointInfo, Stores provider callback.
note left of ManagedSubscribeModule
// Points to the Managed Subscribe gRPC endpoint
{
    protocol: "grpc"
    operations: ["ManagedSubscribe"]
    uri: "Ibeji uri"
    context: "GetSubscriptionInfo"
}
end note
Ibeji <- ManagedSubscribeModule: 1c. Forwards Register request with modified data
DTConsumer -> Ibeji: 2. FindById(Temp)
DTConsumer <- Ibeji: 2a. Temp (EntityAccessInfo[]) : Includes ManagedSubscribe endpointInfo
DTConsumer -> ManagedSubscribeModule: 2. ManagedSubscribe (entity_id, constraints {freq, acc, etc})
ManagedSubscribeModule -> Agemo: 3. Create topic
Agemo -> ManagedSubscribeModule: 3a. SubInfo (dyn topic, broker endpoint info)
ManagedSubscribeModule -> ManagedSubscribeModule: 4. Store Map(entity_id, topicMetadata (subInfo, constraints, management_cb_endpoint))
ManagedSubscribeModule -> DTConsumer: 5. SubInfo (dyn topic, broker endpoint info)
DTConsumer -> Broker: 6. Subscribe (SubInfo.topic)

== Management Process ==
DTConsumer -> Broker: 7. Subscribe (SubInfo.topic)
Broker -> Agemo: 8. Sub notification for SubInfo.topic
Agemo -> ManagedSubscribeModule: 8a. TopicManagementCB(dyn_topic, action)
ManagedSubscribeModule -> DTProvider: 5. TopicManagementCB(action, payload) : management_cb_endpoint
note left of ManagedSubscribeModule
action: START_PUBLISH
payload: {
    entity_id,
    topic,
    constraints, // (type, value)
    subscription_info: {
        protocol, // MQTT
        uri, // MQTT Broker
    },
}
end note
DTProvider -> Broker: data
DTConsumer <- Broker : data
DTConsumer -> Broker: 9. Unsubscribe (SubInfo.topic)
DTConsumer x<- Broker: data
Broker -> Agemo: 10. Unsub notification for SubInfo.topic
Agemo -> ManagedSubscribeModule: 10a. TopicManagementCB(dyn_topic, action)
DTProvider <- ManagedSubscribeModule: 10b. TopicManagementCB(action, payload) 
note left of ManagedSubscribeModule
action: STOP_PUBLISH
payload: {
    entity_id,
    topic,
    constraints, // (type, value)
    subscription_info: None,
}
end note
DTProvider ->x Broker: data
DTProvider -> DTProvider: Remove topic mapping
ManagedSubscribeModule -> Agemo: DeleteTopic(SubInfo.topic)
ManagedSubscribeModule -> ManagedSubscribeModule: Remove topic mapping
@enduml
